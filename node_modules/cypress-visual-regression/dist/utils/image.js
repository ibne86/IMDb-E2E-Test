"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils/image.ts
var image_exports = {};
__export(image_exports, {
  adjustCanvas: () => adjustCanvas,
  parseImage: () => parseImage
});
module.exports = __toCommonJS(image_exports);
var import_fs = require("fs");
var import_pngjs = require("pngjs");

// src/utils/logger.ts
var import_chalk = __toESM(require("chalk"));
var import_util = require("util");
var logLevelKeys = {
  debug: 3,
  info: 2,
  warn: 1,
  error: 0
};
var isLogLevel = (level) => {
  return level in logLevelKeys;
};
var logLevel = () => {
  const envLevel = isLogLevel(process.env.visual_regression_log ?? "") ? process.env.visual_regression_log ?? "error" : "error";
  return logLevelKeys[envLevel];
};
var format = (colorFormat, messages) => {
  for (const msg of messages) {
    if (typeof msg === "string") {
      console.log(colorFormat(msg));
    } else {
      console.log(
        colorFormat(
          (0, import_util.inspect)(msg, {
            showHidden: false,
            customInspect: false,
            colors: true,
            depth: null,
            maxArrayLength: Infinity
          })
        )
      );
    }
  }
};
var printDate = (colorFormat) => {
  console.log(colorFormat(`LOGGER [${(/* @__PURE__ */ new Date()).toISOString()}]`));
};
var error = (...messages) => {
  if (logLevel() < logLevelKeys.error)
    return;
  printDate(import_chalk.default.redBright.bold);
  format(import_chalk.default.redBright, messages);
};
var warn = (...messages) => {
  if (logLevel() < logLevelKeys.warn)
    return;
  printDate(import_chalk.default.yellow.bold);
  format(import_chalk.default.yellowBright, messages);
};
var info = (...messages) => {
  if (logLevel() < logLevelKeys.info)
    return;
  printDate(import_chalk.default.blue.bold);
  format(import_chalk.default.blueBright, messages);
};
var debug = (...messages) => {
  if (logLevel() < logLevelKeys.debug)
    return;
  printDate(import_chalk.default.magenta.bold);
  format(import_chalk.default.magenta, messages);
};
var always = (...messages) => {
  printDate(import_chalk.default.grey.bold);
  format(import_chalk.default.greenBright, messages);
};
var logger = {
  error,
  warn,
  info,
  debug,
  always,
  logLevel
};

// src/utils/image.ts
var parseImage = async (imagePath) => {
  return await new Promise((resolve, reject) => {
    const stream = (0, import_fs.createReadStream)(imagePath);
    stream.on("error", (error2) => {
      logger.error(`Failed to open ${imagePath} with message: ${error2.message}`);
      reject(new Error(`File '${imagePath}' does not exist.`));
    });
    stream.pipe(new import_pngjs.PNG()).on("parsed", function() {
      resolve(this);
    }).on("error", (error2) => {
      logger.error(`Failed to parse image ${imagePath} with message: ${error2.message}`);
      reject(error2);
    });
  });
};
var adjustCanvas = (image, width, height) => {
  if (image.width === width && image.height === height) {
    return image;
  }
  const imageAdjustedCanvas = new import_pngjs.PNG({ width, height, inputHasAlpha: true });
  import_pngjs.PNG.bitblt(image, imageAdjustedCanvas, 0, 0, image.width, image.height, 0, 0);
  return imageAdjustedCanvas;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  adjustCanvas,
  parseImage
});
