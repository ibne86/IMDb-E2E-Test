import {
  logger
} from "./chunk-4UFQ72U2.mjs";

// src/utils/image.ts
import { createReadStream } from "fs";
import { PNG } from "pngjs";
var parseImage = async (imagePath) => {
  return await new Promise((resolve, reject) => {
    const stream = createReadStream(imagePath);
    stream.on("error", (error) => {
      logger.error(`Failed to open ${imagePath} with message: ${error.message}`);
      reject(new Error(`File '${imagePath}' does not exist.`));
    });
    stream.pipe(new PNG()).on("parsed", function() {
      resolve(this);
    }).on("error", (error) => {
      logger.error(`Failed to parse image ${imagePath} with message: ${error.message}`);
      reject(error);
    });
  });
};
var adjustCanvas = (image, width, height) => {
  if (image.width === width && image.height === height) {
    return image;
  }
  const imageAdjustedCanvas = new PNG({ width, height, inputHasAlpha: true });
  PNG.bitblt(image, imageAdjustedCanvas, 0, 0, image.width, image.height, 0, 0);
  return imageAdjustedCanvas;
};

export {
  parseImage,
  adjustCanvas
};
